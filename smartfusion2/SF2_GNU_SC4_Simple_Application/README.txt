================================================================================
                    SmartFusion2 MSS Ethernet MAC simple transmit and
                       receive packet Application
================================================================================

This example project demonstrates the use of the SmartFusion2 Ethernet MAC(TBI)
connected to an SGMII Marvell PHY. It is targeted at the SmartFusion2 Eval Kit.
It demonstrates transmit and receive packet application with the MSS MAC driver.

--------------------------------------------------------------------------------
                            How to use this example
--------------------------------------------------------------------------------
This example project implements a simple transmit and receive packet application
running on SmartFusion2. It includes a command line interface reporting the
Ethernet transmit packet success and receive packet size.

To use this example:
 - Connect the board to a DHCP capable switch or network.
 - Connect the board's USB-UART interface to a PC running a terminal emulation
   application such as HyperTerminal or PuTTY.
 - Execute the example software project.

The software will auto-negotiate an Ethernet link with the network's switch.
The terminal emulator command line interface will display(through UART) the status
of the link, transmit packet success and receive packet size.

--------------------------------------------------------------------------------
                               UART configuration
--------------------------------------------------------------------------------
This example project requires MMUART0 to be connected to a host PC. The host PC
must connect to the serial port using a terminal emulator such as HyperTerminal
or PuTTY configured as follows:
    - 115200 baud
    - 8 data bits
    - 1 stop bit
    - no parity
    - no flow control

--------------------------------------------------------------------------------
                                Target hardware
--------------------------------------------------------------------------------
This example project is targeted at a SmartFusion2 design which has MMUART0
enabled and connected to a host PC. The example project is built for a design
using a SmartFusion2 MSS APB clock frequency of 50MHz. Trying to execute this
example project on a different design will result in incorrect baud rate being
used by MMUART0 or no output if MMUART0 is not enabled and connected.

This example project can be used with another design using a different clock
configuration. This can be achieved by overwriting the content of this example
project's "drivers_config/sys_config" folder with the one generated by Libero
as part of your design's creation.

The following jumpers must be closed when using this example project on the
SmartFusion2 Eval kit in order to connect the on board oscillator to SERDES 
reference clock pins
    J22: pins 1-2 
    J23: pins 1-2 

The hardware Libero design used for example uses MSS SERDES 0 interface to connect
with the on Board Marvel PHY. The Marvel PHY port0 (Phy Addr = 0x00) is used to
connect to the on board RJ45 connector J13.

--------------------------------------------------------------------------------
    Modifying this example to target other boards or interfaces
--------------------------------------------------------------------------------
Please refer to file main.c for modifying the MSS MAC configuration.
The following code in that file configures the MAC:


    MSS_MAC_cfg_struct_def_init(&mac_config);
    
    mac_config.phy_addr = MSS_MAC_PHY_ADDRESS_AUTO_DETECT;
    mac_config.speed_duplex_select = MSS_MAC_ANEG_1000M_FD;
    mac_config.mac_addr[0] = mac_address[0];
    mac_config.mac_addr[1] = mac_address[1];
    mac_config.mac_addr[2] = mac_address[2];
    mac_config.mac_addr[3] = mac_address[3];
    mac_config.mac_addr[4] = mac_address[4];
    mac_config.mac_addr[5] = mac_address[5];

    MSS_MAC_init(&mac_config);
 
You only need to modify these lines to use a different PHY or force the link
speed to a specific speed.

You will also need to remove the following comment from mscc_post_hw_cfg_init.c
file for SmartFusion2 Development kit(050):
    -- mscc_post_hw_cfg_init.c
    void mscc_post_hw_cfg_init(void)
    {
        //    configure_zl30362(); 
        ---
        ----
    }

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                          Silicon revision dependencies
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
This example is built to execute on an M2S090T die. You will need to overwrite
this example project's "drivers_config/sys_config" and "CMSIS" folders with the
one generated by Libero for your hardware design if using a newer silicon revision.
The "drivers_config/sys_config" folder contains information about your hardware
design. This information is used by the CMSIS to initialize clock frequencies
global variables which are used by the SmartFusion2 drivers to derive baud
rates. The CMSIS boot code may also complete the device's clock configuration
depending on silicon version. The "CMSIS" and "drivers_config/sys_config" for
your design can be found in the "firmware" folder of your Libero design.

